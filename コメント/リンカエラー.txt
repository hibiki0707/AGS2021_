リンカーエラーが起きるのは2パターン
①関数等（変数も）、宣言がhにあるが
実体がCPPに書かれていない場合

②必要なライブラリをリンクできてない

③ヘッダファイルに実体を書いちゃっている
（このヘッダファイルを参照しているのが1つだけなら
問題ないが、複数ファイルで参照してると
複数の実態・・・実体っていうのはメモリを確保してる
ってことです・・・が存在することになり、その変数名は
どちらのアドレスを指示しているのかわからなくなる。
　
エラーメッセージをよく見よう
そしたら、呼ぼうとした関数名とクラス名がちょっと
変形されて書かれている。


③への対処ですが、そもそも原因がint 〇〇の実体が
リンク後に2つ以上あることが問題である。

ヘッダに置いてあるものは、本体の「名前と型のみ」
この時点でメモリは確保されない。
本体の名前とか型のみ、でメモリを確保したくない時は
externキーワードを使用する。

extern int test;
って書いたら、これをインクルードした側は
「ああ、int型のtestという名前の変数がどこかにあるんだ
どこかにあるってのは、どっかのobjファイルの中に
メモリを確保した実体があるんだな。ということ

だからexternを使うときは本体が必ず必要です。
こういうエラーが起きるか怒らないかの明確な区別は
その変数が「宣言時にメモリを確保するかどうか」に
かかっている。
