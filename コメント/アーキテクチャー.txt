ダブルクォートはそのCPPからの相対パス
＜＞は登録されているパスから検索される

オブジェクト指向
・継承
・カプセル化
・ポリモーフィズム
　→仮想関数を作って、継承先を呼び出す
　　親のふりをする子
→上位概念で取り扱う


NOMINMAX;

Unicode文字セットを使用＝
アルファベット、数値、基本記号だけなら、256個あれば
マルチバイト→1バイト文字と
	　　　2倍と以上文字の混在
デフォを2バイトに→Unicode


#define 何かを定義
#define GAME gameObject
#define ADD(x,y) x+y

#define ABC

#ifdef	ABC
	// ABCが定義されているときにのみ有効
#endif 

#ifndef ABC
	// ABCが定義されていないときのみ有効
#endif
	
DLL（Dynamic Link Library)
DxLib.libみたいのはStatic Link Kibraryと言って、ビルド時にexeにのみ込まれる
動的ライブラリ
exeにその機能は含まれない（DLLが持っている機能）
dll内部にある関数はexeから、動的に呼び出される

それぞれメリットデメリット
Static Link Libraryは、exe作ってしまえば単品で動く自分の内部に関数があるため、
オーバーヘッドも小さい→デメリット→全部一緒くたにするためにクッソでかくなる
なんかバグがあった場合そのでかいのをまた再配布する必要がある（気にしなくていい）

Dynaic Link Libraryは、exeとは独立してるため、DLLが持っている機能は、
exeからDLLが見えないと使えない
別のアプリを起動しているのと同じなのでオーバーヘッドがある
ただし、実行ファイルとは独立しているため、exeを小さく保つことができる
変動のありそうな機能をDLLにして書き直せば済む
所謂「プラグイン開発」として、その部分をほかの人に作らせることもできる
実は、ウィンドウ出すのにも、コンソール使うのも、見えないライブラリを使用している

msvc〇〇d.dllがありません

#


DebugとRelese
①Debugはデバッグ用の環境
②Releseは配布用の環境

①は遅い、でかい、相手先で動かない可能鵜性がある
　なんでかいうと、Debugしやすいように
　余計なデータおよび余計なリンクそして非効率なアルゴリズムである。すべては
デバッグしやすいために
②はクッソ早い、小さい、余計なものがない
　たいていは相手先でも動く
　ただし、デバッグし辛い。
　原因：デバッグ情報がない
　　　　最適化がかかる→めちゃくちゃいい最適化
　　　　実行の順番を変えたりする
　　　　コンパイラが「不要」と判断した変数、関数を消す
　volatile:最適化から除外する
　Releseの時だけ発生するバグがある
　　

// book
Game Programming Patterns